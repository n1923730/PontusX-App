import type { TransactionReceipt } from '@ethersproject/abstract-provider';
import { type Asset, type Config, type LogLevel } from '@oceanprotocol/lib';
import { type Signer } from 'ethers';
import { type AccessConfig, type ComputeConfig, type ComputeResultConfig, type ComputeStatusConfig, LifecycleStates, type PublishResponse, type StopComputeConfig } from '../@types';
import type { NautilusAsset } from './Asset/NautilusAsset';
export { LogLevel } from '@oceanprotocol/lib';
/**
 * @class
 * Nautilus class
 */
export declare class Nautilus {
    private signer;
    private config;
    private constructor();
    /**
     * Creates a new Nautilus instance
     */
    static create(signer: Signer, config?: Partial<Config>): Promise<Nautilus>;
    /**
     * Set the log level for Nautilus
     * ocean.js LoggerInstance is used for logging
     */
    static setLogLevel(level: LogLevel): void;
    private init;
    private loadOceanConfig;
    private hasValidConfig;
    private getChainConfig;
    getOceanConfig(): Config;
    publish(asset: NautilusAsset): Promise<PublishResponse>;
    edit(asset: NautilusAsset): Promise<PublishResponse>;
    setServicePrice(aquaAsset: Asset, serviceId: string, newPrice: string): Promise<TransactionReceipt>;
    getAquariusAssets(dids: string[]): Promise<{
        [did: string]: Asset;
    }>;
    getAquariusAsset(did: string): Promise<Asset>;
    setAssetLifecycleState(aquariusAsset: Asset, state: LifecycleStates): Promise<TransactionReceipt>;
    /**
     * @param accessConfig configuration object
     */
    access(accessConfig: Omit<AccessConfig, 'signer' | 'chainConfig'>): Promise<string>;
    compute(computeConfig: Omit<ComputeConfig, 'signer' | 'chainConfig'>): Promise<import("@oceanprotocol/lib").ComputeJob | import("@oceanprotocol/lib").ComputeJob[]>;
    getComputeStatus(computeStatusConfig: Omit<ComputeStatusConfig, 'signer'>): Promise<import("@oceanprotocol/lib").ComputeJob>;
    getComputeResult(computeResultConfig: Omit<ComputeResultConfig, 'signer'>): Promise<string>;
    stopCompute(stopComputeConfig: Omit<StopComputeConfig, 'signer'>): Promise<import("@oceanprotocol/lib").ComputeJob | import("@oceanprotocol/lib").ComputeJob[]>;
}
//# sourceMappingURL=Nautilus.d.ts.map