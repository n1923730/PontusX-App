import type { Asset } from '@oceanprotocol/lib';
import type { CredentialListTypes, IAssetBuilder, LifecycleStates } from '../../@types/Nautilus';
import type { MetadataConfig, NftCreateDataWithoutOwner } from '../../@types/Publish';
import { NautilusAsset } from './NautilusAsset';
import type { FileTypes, NautilusService, ServiceTypes } from './Service/NautilusService';
export declare class AssetBuilder implements IAssetBuilder {
    private asset;
    constructor(aquariusAsset?: Asset);
    reset(): void;
    setType(type: MetadataConfig['type']): this;
    setName(name: string): this;
    setDescription(description: string): this;
    setLicense(license: string): this;
    setAuthor(author: string): this;
    setAlgorithm(algorithm: MetadataConfig['algorithm']): this;
    addService(service: NautilusService<ServiceTypes, FileTypes>): this;
    removeService(serviceId: string): this;
    setNftData(tokenData: NftCreateDataWithoutOwner): this;
    setLifecycleState(state: LifecycleStates): this;
    setOwner(owner: string): this;
    addAdditionalInformation(additionalInformation: {
        [key: string]: any;
    }): this;
    setCopyrightHolder(copyrightHolder: string): this;
    addTags(tags: string[]): this;
    addLinks(links: string[]): this;
    setContentLanguage(language: string): this;
    addCategories(categories: string[]): this;
    addCredentialAddresses(list: CredentialListTypes, addresses: string[]): this;
    removeCredentialAddresses(list: CredentialListTypes, addresses: string[]): this;
    build(): NautilusAsset;
}
//# sourceMappingURL=AssetBuilder.d.ts.map