import type { ConsumerParameter } from '@oceanprotocol/lib';
import type { IServiceBuilder, ServiceBuilderConfig } from '../../../@types/Nautilus';
import { type DatatokenCreateParamsWithoutOwner, type TrustedAlgorithmAsset } from '../../../@types/Publish';
import type { PricingConfigWithoutOwner } from '../NautilusAsset';
import { type FileTypes, NautilusService, type ServiceFileType, ServiceTypes } from './NautilusService';
export declare class ServiceBuilder<ServiceType extends ServiceTypes, FileType extends FileTypes> implements IServiceBuilder<ServiceType, FileType> {
    private service;
    constructor(config: ServiceBuilderConfig);
    addFile(file: ServiceFileType<FileType>): this;
    setTimeout(timeout: number): this;
    setServiceEndpoint(endpoint: string): this;
    setName(name: string): this;
    setDescription(description: string): this;
    addConsumerParameter(parameter: ConsumerParameter): this;
    addAdditionalInformation(additionalInformation: {
        [key: string]: any;
    }): this;
    allowRawAlgorithms(allow?: boolean): this;
    allowAlgorithmNetworkAccess(allow?: boolean): this;
    addTrustedAlgorithms(trustedAlgorithmAssets: TrustedAlgorithmAsset[]): this;
    removeTrustedAlgorithm(did: string): this;
    setAllAlgorithmsTrusted(): this;
    setAllAlgorithmsUntrusted(): this;
    addTrustedAlgorithmPublisher(publisherAddress: string): this;
    removeTrustedAlgorithmPublisher(publisherAddress: string): this;
    setAllAlgorithmPublishersTrusted(): this;
    setAllAlgorithmPublishersUntrusted(): this;
    setDatatokenData(tokenData: DatatokenCreateParamsWithoutOwner): this;
    setDatatokenNameAndSymbol(dtName: string, dtSymbol: string): this;
    setPricing(pricing: PricingConfigWithoutOwner): this;
    reset(): void;
    build(): NautilusService<ServiceType, FileType>;
}
//# sourceMappingURL=ServiceBuilder.d.ts.map