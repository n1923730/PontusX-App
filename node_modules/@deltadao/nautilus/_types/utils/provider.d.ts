import { type Arweave, type ComputeAlgorithm, type ComputeAsset, type ComputeEnvironment, type ComputeJob, type ComputeOutput, type FileInfo, type GraphqlQuery, type Ipfs, type ProviderComputeInitializeResults, type ReceiptOrEstimate, type Service, type Smartcontract, type UrlFile, type UserCustomParameters } from '@oceanprotocol/lib';
import type { Signer } from 'ethers';
import type { AssetWithAccessDetails } from '../@types/Compute';
export declare function isValidProvider(providerUrl: string): Promise<boolean>;
export declare function getEncryptedFiles(files: any, chainId: number, providerUrl: string): Promise<string>;
export declare function checkDidFiles(did: string, serviceId: string, providerUrl: string): Promise<FileInfo[]>;
export declare function initializeProvider(asset: AssetWithAccessDetails, accountId: string, service: Service, fileIndex?: number, consumerParameters?: UserCustomParameters): Promise<import("@oceanprotocol/lib").ProviderInitialize>;
export declare function initializeProviderForCompute(dataset: AssetWithAccessDetails, algorithm: AssetWithAccessDetails, accountId: string, computeEnv?: ComputeEnvironment): Promise<ProviderComputeInitializeResults>;
export declare function startComputeJob(providerUri: string, dataset: ComputeAsset, algorithm: ComputeAlgorithm, signer: Signer, computeEnv: ComputeEnvironment, output: ComputeOutput): Promise<ComputeJob | ComputeJob[]>;
export declare function stopComputeJob(providerUri: string, did: string, jobId: string, signer: Signer): Promise<ComputeJob | ComputeJob[]>;
export declare function getValidUntilTime(computeEnvMaxJobDuration: number, datasetTimeout?: number, algorithmTimeout?: number): number;
export declare function approveProviderFee(asset: AssetWithAccessDetails, accountId: string, signer: Signer, providerFeeAmount: string): Promise<ReceiptOrEstimate>;
export declare function getFileInfo(file: UrlFile | Arweave | GraphqlQuery | Smartcontract | Ipfs, providerUri: string, withChecksum?: boolean): Promise<FileInfo[]>;
//# sourceMappingURL=provider.d.ts.map