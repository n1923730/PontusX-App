import { type Asset, type ComputeEnvironment, type Config, type ProviderComputeInitialize } from '@oceanprotocol/lib';
import type { Signer } from 'ethers';
import type { AssetWithAccessDetails, ComputeConfig, ComputeResultConfig, ComputeStatusConfig, OrderPriceAndFees, StopComputeConfig } from '../@types/Compute';
export declare function compute(computeConfig: ComputeConfig): Promise<import("@oceanprotocol/lib").ComputeJob | import("@oceanprotocol/lib").ComputeJob[]>;
export declare function getStatus(computeStatusConfig: ComputeStatusConfig): Promise<import("@oceanprotocol/lib").ComputeJob>;
export declare function retrieveResult(computeResultConfig: ComputeResultConfig): Promise<string>;
export declare function getComputeEnviroment(asset: Asset): Promise<ComputeEnvironment>;
export declare function handleComputeOrder(signer: Signer, asset: AssetWithAccessDetails, orderPriceAndFees: OrderPriceAndFees, accountId: string, initializeData: ProviderComputeInitialize, config: Config, computeConsumerAddress?: string): Promise<string>;
export declare function stopCompute(stopComputeConfig: StopComputeConfig): Promise<import("@oceanprotocol/lib").ComputeJob | import("@oceanprotocol/lib").ComputeJob[]>;
//# sourceMappingURL=index.d.ts.map