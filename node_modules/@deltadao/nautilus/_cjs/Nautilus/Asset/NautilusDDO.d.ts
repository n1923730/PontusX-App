import { type Asset, type Credentials, type DDO, type Service } from '@oceanprotocol/lib';
import type { MetadataConfig } from '../../@types';
import type { FileTypes, NautilusService, ServiceTypes } from './Service/NautilusService';
export declare class NautilusDDO {
    id: string;
    context: string[];
    nftAddress: string;
    chainId: number;
    version: string;
    metadata: Partial<MetadataConfig>;
    services: NautilusService<ServiceTypes, FileTypes>[];
    removeServices: string[];
    private ddo;
    credentials: Credentials;
    static createFromAquariusAsset(aquariusAsset: Asset): NautilusDDO;
    static createFromDDO(ddo: DDO): NautilusDDO;
    getOriginalDDO(): DDO;
    private buildDDOServices;
    private buildDDOMetadata;
    private getDDOServices;
    private buildDDO;
    getDDO(createDDOData?: {
        create: boolean;
        chainId?: number;
        nftAddress?: string;
    }): Promise<DDO>;
    hasAllRequiredOceanDDOAttributes(): boolean;
    static replaceServiceBasedOnId(service: Service, potentialReplacements: Service[]): Service;
}
