"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.access = void 0;
const lib_1 = require("@oceanprotocol/lib");
const utils_1 = require("../utils");
const aquarius_1 = require("../utils/aquarius");
const access_details_1 = require("../utils/helpers/access-details");
const assets_1 = require("../utils/helpers/assets");
const order_1 = require("../utils/order");
const provider_1 = require("../utils/provider");
async function access(accessConfig) {
    const { assetDid, chainConfig: config, signer, serviceId, fileIndex, userdata } = accessConfig;
    const signerAddress = await signer.getAddress();
    const asset = await (0, aquarius_1.getAsset)(config.metadataCacheUri, assetDid);
    const accessDetails = await (0, access_details_1.getAccessDetails)(config.subgraphUri, asset.datatokens[0].address, asset.services[0].timeout, signerAddress);
    const assetWithAccessDetails = {
        ...asset,
        accessDetails
    };
    lib_1.LoggerInstance.debug('[access] AccessDetails:', accessDetails);
    const accessService = serviceId
        ? (0, utils_1.getServiceById)(asset, serviceId)
        : (0, utils_1.getServiceByName)(asset, 'access');
    const initializeData = await (0, provider_1.initializeProvider)(assetWithAccessDetails, signerAddress, accessService, fileIndex, userdata);
    const assetWithPrice = await (0, assets_1.getAssetWithPrice)(assetWithAccessDetails, signer, config, initializeData.providerFee);
    lib_1.LoggerInstance.debug('[access] AssetWithprice:', assetWithPrice.orderPriceAndFees);
    if (isOwned(accessDetails)) {
        lib_1.LoggerInstance.debug(`Found valid order for ${asset.id} with datatoken ${accessDetails.datatoken.address}`);
        return await getAssetDownloadUrl(assetWithPrice, signer, accessService, fileIndex, userdata);
    }
    const orderTx = await (0, order_1.order)({
        signer,
        asset: assetWithAccessDetails,
        orderPriceAndFees: assetWithPrice.orderPriceAndFees,
        accountId: await signer.getAddress(),
        config,
        providerFees: initializeData?.providerFee
    });
    const tx = await orderTx.wait();
    assetWithAccessDetails.accessDetails.validOrderTx = tx?.transactionHash;
    return await getAssetDownloadUrl(assetWithPrice, signer, accessService, fileIndex, userdata);
}
exports.access = access;
function isOwned(accessDetails) {
    return accessDetails.isOwned && accessDetails.validOrderTx;
}
async function getAssetDownloadUrl(asset, signer, service, fileIndex, userCustomParameters) {
    lib_1.LoggerInstance.debug(`Requesting download url for asset ${asset.id}`);
    lib_1.LoggerInstance.debug({ asset, userCustomParameters });
    const downloadUrl = await lib_1.ProviderInstance.getDownloadUrl(asset.id, service.id, fileIndex || 0, asset.accessDetails.validOrderTx, service.serviceEndpoint, signer, userCustomParameters);
    return downloadUrl;
}
//# sourceMappingURL=index.js.map