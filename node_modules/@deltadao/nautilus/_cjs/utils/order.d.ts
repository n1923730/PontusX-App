import { type Asset, type ComputeAlgorithm, type Config, type ProviderFees } from '@oceanprotocol/lib';
import type { Signer, providers } from 'ethers';
import type { AssetWithAccessDetails, OrderPriceAndFees } from '../@types';
export declare function isOrderable(asset: Asset, serviceId: string, algorithm: ComputeAlgorithm, algorithmAsset: Asset): Promise<boolean>;
export declare function reuseOrder({ signer, asset, validOrderTx, providerFees }: {
    signer: Signer;
    asset: AssetWithAccessDetails;
    validOrderTx: string;
    providerFees: ProviderFees;
}): Promise<providers.TransactionResponse>;
export declare function order({ signer, asset, orderPriceAndFees, accountId, config, providerFees, computeConsumerAddress }: {
    signer: Signer;
    asset: AssetWithAccessDetails;
    orderPriceAndFees: OrderPriceAndFees;
    accountId: string;
    config: Config;
    providerFees?: ProviderFees;
    computeConsumerAddress?: string;
}): Promise<providers.TransactionResponse>;
