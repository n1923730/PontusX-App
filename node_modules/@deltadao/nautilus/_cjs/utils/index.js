"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.combineArraysAndReplaceItems = exports.combineArrays = exports.removeDuplicatesFromArray = exports.getAllPromisesOnArray = exports.dateToStringNoMS = exports.getDatatokenBalance = exports.getServiceByName = exports.getServiceById = exports.getOceanConfig = void 0;
const lib_1 = require("@oceanprotocol/lib");
function getOceanConfig(chainId, infuraProjectId) {
    const config = new lib_1.ConfigHelper().getConfig(chainId, infuraProjectId);
    return config;
}
exports.getOceanConfig = getOceanConfig;
function getServiceById(asset, serviceId) {
    if (!asset)
        return;
    return asset.services?.find((s) => s.id === serviceId);
}
exports.getServiceById = getServiceById;
function getServiceByName(asset, serviceName) {
    if (!asset)
        return;
    return asset.services?.find((s) => s.type === serviceName);
}
exports.getServiceByName = getServiceByName;
async function getDatatokenBalance(signer, datatokenAddress) {
    return Number(await new lib_1.Datatoken(signer).balance(datatokenAddress, await signer.getAddress()));
}
exports.getDatatokenBalance = getDatatokenBalance;
function dateToStringNoMS(date) {
    return date.toISOString().replace(/\.[0-9]{3}Z/, 'Z');
}
exports.dateToStringNoMS = dateToStringNoMS;
function getAllPromisesOnArray(array, promise) {
    return Promise.all(array.map((e) => promise(e)));
}
exports.getAllPromisesOnArray = getAllPromisesOnArray;
function removeDuplicatesFromArray(array) {
    return array.filter((value, index, array) => array.indexOf(value) === index);
}
exports.removeDuplicatesFromArray = removeDuplicatesFromArray;
function combineArrays(arrayOne, arrayTwo) {
    const newArray = arrayOne.concat(arrayTwo);
    return removeDuplicatesFromArray(newArray);
}
exports.combineArrays = combineArrays;
function combineArraysAndReplaceItems(array, newItems, replace) {
    const arrayWithReplacedItems = [];
    for (const existingItem of array) {
        const replacedItem = replace(existingItem, newItems);
        const replaceItemIndexInNewItems = newItems.indexOf(replacedItem);
        if (replaceItemIndexInNewItems > -1) {
            newItems.splice(replaceItemIndexInNewItems, 1);
        }
        arrayWithReplacedItems.push(replacedItem);
    }
    return combineArrays(arrayWithReplacedItems, newItems);
}
exports.combineArraysAndReplaceItems = combineArraysAndReplaceItems;
//# sourceMappingURL=index.js.map