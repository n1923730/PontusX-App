import { type Asset, type Config, type Service } from '@oceanprotocol/lib';
import type { Signer } from 'ethers';
export declare function getOceanConfig(chainId: number, infuraProjectId?: string): Config;
export declare function getServiceById(asset: Asset, serviceId: string): Service;
export declare function getServiceByName(asset: Asset, serviceName: string): Service;
export declare function getDatatokenBalance(signer: Signer, datatokenAddress: any): Promise<number>;
export declare function dateToStringNoMS(date: Date): string;
export declare function getAllPromisesOnArray<E, P>(array: E[], promise: (element: E) => Promise<P>): Promise<Awaited<P>[]>;
/**
 * Filters an array to remove any duplicate values
 * @param array the array to filter
 * @returns an array containing only unique entries
 */
export declare function removeDuplicatesFromArray<T>(array: T[]): T[];
/**
 * Combines two arrays and returns an array containing only unique values
 * @param arrayOne first array
 * @param arrayTwo second array
 * @returns array with combination of only unique entries
 */
export declare function combineArrays<T>(arrayOne: T[], arrayTwo: T[]): T[];
/**
 * Combines two arrays and replaces items in the base array with new items based on a customizable function.
 * @param array the base array for the combination
 * @param newItems the new items to replace existing ones, or be added to the base array
 * @param replace the function to replace a given item with any of the new items
 * @returns a combination of the base array, containing all base items, or their respective replacements, and any leftover new items of the newItems array
 */
export declare function combineArraysAndReplaceItems<T>(array: T[], newItems: T[], replace: (existingItem: T, newItems: T[]) => T): T[];
