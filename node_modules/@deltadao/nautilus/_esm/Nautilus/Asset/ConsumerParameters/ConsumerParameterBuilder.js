import { NautilusConsumerParameter } from './NautilusConsumerParameter';
export class ConsumerParameterBuilder {
    consumerParameter = new NautilusConsumerParameter();
    reset() {
        this.consumerParameter = new NautilusConsumerParameter();
    }
    setType(type) {
        this.consumerParameter.type = type;
        return this;
    }
    setName(name) {
        this.consumerParameter.name = name;
        return this;
    }
    setDescription(description) {
        this.consumerParameter.description = description;
        return this;
    }
    setLabel(label) {
        this.consumerParameter.label = label;
        return this;
    }
    setRequired(required) {
        this.consumerParameter.required = required;
        return this;
    }
    setDefault(value) {
        this.consumerParameter.default = value.toString();
        return this;
    }
    addOption(option) {
        if (this.consumerParameter.type !== 'select') {
            throw new Error("[ConsumerParameterBuilder] Options can only be added for 'selet' type parameters.");
        }
        this.consumerParameter._options.push(option);
        return this;
    }
    build() {
        const { _options, ...parameter } = this.consumerParameter;
        return this.consumerParameter.options
            ? { ...parameter, options: this.consumerParameter.options }
            : parameter;
    }
}
//# sourceMappingURL=ConsumerParameterBuilder.js.map